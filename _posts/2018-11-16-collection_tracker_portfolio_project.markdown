---
layout: post
title:      "Collection Tracker Portfolio Project"
date:       2018-11-16 19:51:52 +0000
permalink:  collection_tracker_portfolio_project
---


This was a hard one.  Fun, but super hard.

collection_tracker1 is a Sinatra App that can be used for avid pottery collectors (like myself) to index an ever expanding collection. Though it is tailored to be specific visually to one brand (Emma Bridgewater), I decided early on to leave certain models out of the process (such as Brand) to make it easier upon the user. I've used it to catalogue my collection of EB, another collector could use it for Shelley, Royal Albert, Wedgewood, the list goes on and on. For anyone who collects any porcelain/pottery, it is meant to be an easy way to keep tabs on all our pieces. In fact, it could probably be used for other items that someone has a collection of, anything that varies by shape, size, and color, but that's a story for another day.

It probably sounds amusing to someone who isn't that into pottery, but as I made my Gem project for LEGO, so I did with Sinatra. I want to make things that I myself would like to use. Where is the fun in not wanting to?

Going into the project, I knew that the most difficult thing right off the bat would most likely be what models to use, what relationships they had to one another, and what attributes were confined to each. It is something that always tricks me up. I can get everything working perfectly in the actual controller's, but if the model relationships are wrong, nothing works. Of course I was right. I ended up starting the project, and zooming through the first week, and wrote hundreds of lines of spec code to help me along, only to get waylaid for the next 10 days by horrible bronchitis. By the time i picked up the project again, and after meeting with Howard, as well as my first 1:1, I realized that I had overcomplicated the relationships. I was being too ambitious. I was making my own head spin. 

Howard's advice was to start small. Master the simple relationships first, get that to work. If I didn't understand what was going on with an MVC, then it wouldn't really matter how many models I stacked the database with, or how many join tables there were if I couldn't figure out how to relate all the information. I don't know how many times I redid the database through the project. In the end, I ended up with five models. Users, Pieces, Patterns, Wishlist, and PiecePatterns as the join table that connects Pieces and Patterns. Sometimes trying to figure out the relationships makes me feel like I'm amidst the Abbot and Costello bit Who's on first. That or a tongue twister. 

After going back to square one and sketching through a very rudimentary Sinatra App with only two models; users and collections, collection containing all the information of piece, patterns, quantity, etc, as if one was reading an excel doc of a collection, I went back and started to pick the threads apart. Piece became it's own model, with its own attributes of name, and size. Pattern has a single attribute, name. For a long time, quantity was placed with pattern. I ended up making a second branch of my app, trying to see if it was possible to work out the relationships properly so that a user could input the precise quantity of a piece they had in a single pattern. It ended up having the added attribute of quantity upon the join table of piecepatterns. Unfortunately, I ran into a wall with that branch, and at the moment am stuck, because while it's possible for a user to add however many of a piece to their collection, I haven't quite figured out how to have another user add the same piece. I'm getting lots of errors. I had to take a step back and make the executive decision that there is no quantity attribute (save in Wishlist, but that's unrelated). I would really love to dip back in and improve the app so that a user can add multiple quantities of a piece at once, rather than having to go through the slow way, and add it one by one to the database. That is where I can see taking the project in the future, along with perhaps adding a price element so that a collector can keep tabs on how much money has been spent (and how much to lie to one's partner/spouse about how much one has spent on said item). And you might be saying, well how come you can't place quantity in piece, or patterns? Because you just can't, believe me. If you do with pattern, then it updates for every single piece in that pattern. If you do with piece, precisely the same.

After getting the right models and relationships down, moving into the Controllers and CRUD was a bit more exciting. I actually had a lot of fun moving back and forth between the embedded ruby views, and picking apart which information was needed in the params hash to persist data to the databse in the controllers. I was surprisingly proud of myself, and my desire to continually drop into pry in order to figure out what was going on when information failed to be pitched back into the view, or I was getting the wrong thing, or the dreaded nil. Sinatra and ActiveRecord errors are informational, and frustrating, and it's actually a delight to learn that with certain mind boggling errors, after googling to see what other coders have to say, there are times when my frustration is granted because I can see that my problems are even difficult for the advanced coder. I continually had a huge feeling of relief, and excitement every time I was able to pinpoint which bit of code was wrong in the controllers, how shuffling around the order made certain CRUD actions possible, and suddenly everything worked. Though, it certainly is very frustrating when everything seems to be working in your project one day, only to start the next and it seems like everything is broken. I had a lot of days like that.

And the last piece after all parts of the MVC were working, was a little stylizing. I didn't know any html or css going into Flatiron. I don't think I know that much more now to be truthful, but I was able to make the project look a little more than just a white screen with black text. CSS and html were easier to figure out, as there are so many resources upon the web to search, so many books to read (the same can be said of ActiveRecord and Ruby, but ActiveRecord still feels like a giant behemoth to me, and I find it daunting at the best of times), to find the right answer in a much shorter time period. 

I will say that my biggest obstacles with this project were time, and ambition. I'm not on a race to the clock. If I was, I would have handed in the project and called time on it after figuring out the two simple controllers, because at that point I had satisfied all the project requirements. But I wanted to do more. I wanted to learn more, and I wanted to feel as if approaching the project review, I would have a comfortable enough relationship with the material that questions wouldn't trip me up. I hope I am in a better place now, but the review is yet to come. 

All in all, though it took time, it was worth it.  I continually have to remind myself I'm not in any competition with anyone, and just because someone else did their project in 2 days, or less than 2 weeks, there is nothing wrong with me for taking longer. And in the end, I think the extra time was worth it. I'm looking forward to Rails, and also maybe learning solutions for all the things that tripped me up in this one, so that I can go back and take collection_tracker ever further. That and buy more pottery.


